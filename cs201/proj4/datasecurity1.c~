#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#include "datasecurity.h"

#define ELEMENT 3
#define NUMLETTERS 80 

void StringInterface()
{
  char *choice;
  choice = (char *) malloc(NUMLETTERS * sizeof(char)) ;
  PrintSMenu();
  while(fscanf(stdin, "%s", choice) != '\n')
  {
    switch(choice[0])
      {
      case 'E':
	TranslateString();
	break;
      case 'e':
	TranslateString();
	break;
      case'D':
	DecryptString();
	break;
      case 'd':
	DecryptString();
	break;
      default:
	return;
	break;
      }
  PrintSMenu();
  }     
  return;
}
 

void FileInterface()
{
  char *choice;
  choice = (char *) malloc(NUMLETTERS * sizeof(char)) ;
  PrintSMenu();
  while(fscanf(stdin, "%s", choice) != '\n')
  {
    switch(choice[0])
      {
      case 'E':
	TranslateFile();
	break;
      case 'e':
	TranslateFile();
	break;
      case'D':
	DecryptFile();
	break;
      case 'd':
	DecryptFile();
	break;
      default:
	return;
	break;
      }
  PrintSMenu();
  }     
  return;
}
 

void PrintKeyTable()
{
  int num, result, uppernum;
  KEYS character;
  fprintf(stdout, "\n\t\t        KEY TABLE\n");
  fprintf(stdout, "========================================================");
  fprintf(stdout, "======\n");
  fprintf(stdout, "Decoded: ");
  for(uppernum = 65; uppernum < 91; uppernum++)
    {
      character.input = uppernum;
      fprintf(stdout, "%2c", character.input);
    }
  fprintf(stdout, "\n");

  fprintf(stdout, "Encoded: ");
  for(num = 65; num < 91; num++)
    {
      result = Hailstones(num, ELEMENT);
      character.output = result;
      fprintf(stdout, "%2c", character.output);
    }

    fprintf(stdout, "\n");
    return;
}

void PrintMenu()
{
  fprintf(stdout, "\n\n_______________Main Menu______________");
  fprintf(stdout, "\n               P - Print Key Table");
  fprintf(stdout, "\n               F - Translate File");
  fprintf(stdout, "\n               S - Translate User String");
  fprintf(stdout, "\n               Q - Quit");
  fprintf(stdout, "\n\nPlease make a Selection : ");
  return;
}


void PrintSMenu()
{
  char choice;
  fprintf(stdout, "\n\n                   E - Encryption Mode");
  fprintf(stdout, "\n                   D - Decryption Mode\n");
  fprintf(stdout, "\n\nPlease enter your Selection : ");
}

void TranslateString()
{
  char *input, *output, ch;
  KEYS *character;
  int i, temp, j, k;
  input = (char *) malloc(NUMLETTERS * sizeof(char)) ;

   /* make sure we actually got the memory */
   if (input == NULL)
   {
      printf("Out of memory - getting space for letters\n");
      exit (-1);
   }
   output = (char *) malloc(NUMLETTERS * sizeof(char));
   
   /* make sure we actually got the memory */
   if (output == NULL)
   {
      printf("Out of memory - getting space for letters\n");
      exit (-1);
   }
   character = (KEYS *) malloc(26 * sizeof(KEYS));
   fprintf(stdout, "\nPlease enter your message: ");
   temp = 0;
  while(fscanf(stdin, "%s", input) != '\n')
    {
      continue;
    }
   int n = 0;
   j = 64;
   for(i = 0; i < 26; i++)
     {
       j++;
       character[i].input = j;
       character[i].output = Hailstones(character[i].input, ELEMENT);
     }
   for(k = 0; k < NUMLETTERS; k++)
     {
       for(n = 0; n < 26; n++)
	 {
	   if(input[k] == character[n].input)
	     {
	       output[k] = character[n].output;
	     }
	   else if(input[k] > 122)
	     {
	       output[k] = input[k]; 
	     }
	   else if(input[k] > 90 && input[k] < 97)
	     {
	       output[k] = input[k]; 
	     }
	   else if(input[k] < 65)
	     {
	       output[k] = input[k]; 
	     }
	 }
     }
   printf("\nThe Encrypted Message is: %s\n", output);
   
   free(input);
   free(character);
   free(output);

   return;
}

void DecryptString()
{
  char *input, *output, ch;
  KEYS *character;
  int i, temp, j, k;
  input = (char *) malloc(NUMLETTERS * sizeof(char)) ;

   /* make sure we actually got the memory */
   if (input == NULL)
   {
      printf("Out of memory - getting space for letters\n");
      exit (-1);
   }
   character = (KEYS *) malloc(26 * sizeof(KEYS));
   fprintf(stdout, "\nPlease your message: ");
   output = (char *) malloc(NUMLETTERS * sizeof(char));

   /* make sure we actually got the memory */
   if (output == NULL)
   {
      printf("Out of memory - getting space for letters\n");
      exit (-1);
   }
   int n = 0;
   j = 64;
   for(i = 0; i < 26; i++)
     {
       j++;
       character[i].input = j;
       character[i].output = Hailstones(character[i].input, ELEMENT);
     }
   fgets(input, 80, stdin);
   for(k = 0; k < NUMLETTERS; k++)
     {
       for(n = 0; n < 26; n++)
	 {
	   if(input[k] > 122)
	     {
	       output[k] = input[k]; 
	     }
	   else if(input[k] < 65)
	     {
	       output[k] = input[k]; 
	     }
	   else if(input[k] == character[n].output)
	     {
	       output[k] = character[n].input;
	     }	
	 }
     }
   printf("\nThe Encrypted Message is: %s\n", output);
   
   free(input);
   free(character);
   free(output);
}



void TranslateFile()
{
  char *input, *output, *filename, *outfilename, ch;
  KEYS *character;
  FILE *ifp, *ofp;
  int i, temp, j, k, n;
  
  character = (KEYS *) malloc(26 * sizeof(KEYS));
  input = (char *) malloc(NUMLETTERS * sizeof(char)) ;

   /* make sure we actually got the memory */
   if (input == NULL)
   {
      printf("Out of memory - getting space for letters\n");
      exit (-1);
   }

  output = (char *) malloc(NUMLETTERS * sizeof(char)) ;

   /* make sure we actually got the memory */
   if (output == NULL)
   {
      printf("Out of memory - getting space for letters\n");
      exit (-1);
   }

  filename = (char *) malloc(NUMLETTERS * sizeof(char)) ;

   /* make sure we actually got the memory */
   if (filename == NULL)
   {
      printf("Out of memory - getting space for letters\n");
      exit(-2);
   }
  
  outfilename = (char *) malloc(NUMLETTERS * sizeof(char)) ;

   /* make sure we actually got the memory */
   if (outfilename == NULL)
   {
      printf("Out of memory - getting space for letters\n");
      exit(-3);
   }

  fprintf(stdout, "\nPLease Enter your input file: ");
  fscanf(stdin, "%s", filename);
  fprintf(stdout, "\nPlease enter your output file: ");
  fscanf(stdin, "%s", outfilename);

  ifp = fopen(filename, "r");
  if (ifp == NULL) {
    fprintf(stderr, "Can't open %s for reading.\n", filename); 
    exit(-1);
  }

  ofp = fopen(outfilename, "w");
  if (ifp == NULL) {
    fprintf(stderr, "Can't open %s for writing.\n", outfilename); 
    exit(-1);
  }
  j = 64;
  for(i = 0; i < 26; i++)
    {
      j++;
      character[i].input = j;
      character[i].output = Hailstones(character[i].input, ELEMENT);
    }
  while(fgets(input, 80, ifp) != NULL)
    {
      for(k = 0; k < NUMLETTERS; k++)
	{
	  for(n = 0; n < 26; n++)
	    {
	      if(input[k] > 96 && input[k] < 123)
		{
		  input[k] -= 32;
		  if(input[k] == character[n].input)
		    {
		      output[k] = character[n].output;
		    }
		}
	      else if(input[k] == character[n].input)
		{
		  output[k] = character[n].output;
		}
	      else if(input[k] > 122)
		{
		  output[k] = input[k]; 
		}
	      else if(input[k] > 90 && input[k] < 97)
		{
		  output[k] = input[k]; 
		}
	      else if(input[k] < 65)
		{
		  output[k] = input[k]; 
		}
	
	    }
	}
      fputs(output, ofp);
    }
   fclose(ifp);
   fclose(ofp);
   free(input);
   free(character);
   free(output);
   return;
}

void DecryptFile()
{
  char *input, *output, *filename, *outfilename, ch;
  KEYS *character;
  FILE *ifp, *ofp;
  int i, temp, j, k, n;
  
  character = (KEYS *) malloc(26 * sizeof(KEYS));
  input = (char *) malloc(NUMLETTERS * sizeof(char)) ;

   /* make sure we actually got the memory */
   if (input == NULL)
   {
      printf("Out of memory - getting space for letters\n");
      exit (-1);
   }

  output = (char *) malloc(NUMLETTERS * sizeof(char)) ;

   /* make sure we actually got the memory */
   if (output == NULL)
   {
      printf("Out of memory - getting space for letters\n");
      exit (-1);
   }

  filename = (char *) malloc(NUMLETTERS * sizeof(char)) ;

   /* make sure we actually got the memory */
   if (filename == NULL)
   {
      printf("Out of memory - getting space for letters\n");
      exit(-2);
   }
  
  outfilename = (char *) malloc(NUMLETTERS * sizeof(char)) ;

   /* make sure we actually got the memory */
   if (outfilename == NULL)
   {
      printf("Out of memory - getting space for letters\n");
      exit(-3);
   }

  fprintf(stdout, "\nPLease ENter your input file: ");
  fscanf(stdin, "%s", filename);
  fprintf(stdout, "\nPlease enter your output file: ");
  fscanf(stdin, "%s", outfilename);

  ifp = fopen(filename, "r");
  if (ifp == NULL) {
    fprintf(stderr, "Can't open %s for reading.\n", filename); 
    exit(-1);
  }

  ofp = fopen(outfilename, "w");
  if (ifp == NULL) {
    fprintf(stderr, "Can't open %s for writing.\n", outfilename); 
    exit(-1);
  }
  j = 64;
  for(i = 0; i < 26; i++)
    {
      j++;
      character[i].input = j;
      character[i].output = Hailstones(character[i].input, ELEMENT);
    }
  while(fgets(input, 80, ifp) != NULL)
    {
      for(k = 0; k < NUMLETTERS; k++)
	{
	  for(n = 0; n < 26; n++)
	    {
	      if(input[k] > 122)
		{
		  output[k] = input[k]; 
		}
	      else if(input[k] < 65)
		{
		  output[k] = input[k]; 
		}
	      else if(input[k] == character[n].output)
		{
		  output[k] = character[n].input;
		}	
	    }
	}
      fputs(output, ofp);
    }
   fclose(ifp);
   fclose(ofp);
   free(input);
   free(character);
   free(output);
}

int DecryptHailstone(int num)
{
  int i;
  for(i = 65; i < 91; i++)
    {
      if(num == Hailstones(i, ELEMENT))
	{
	  num = i;
	}
    }

  return num;
  
}
int Hailstones(int num, int times)
{

  if(num == 1)
    {
      return num;
    }
  else if(times == 1)
    {
      return num;
    }
  else if(num%2 == 0)
    {
      num /= 2;
    }
  else if(num%2 != 0)
    {
      num *= 3;
      num++;
    }

  num = Hailstones(num, times - 1);

  if(num == 17)
    {
      num = 111;
    }
  else if(num == 18)
    {
      num = 114;
    }
  else if(num == 19)
    {
      num = 115;
    }
  else if(num == 20)
    {
      num = 117;
    }
  else if(num == 124)
    {
      num = 120;
    }
  else if(num == 21)
    {
      num = 121;
    }
  else if(num == 130)
    {
      num = 97;
    }
  else if(num == 22)
    {
      num = 103;
    }
  else if(num == 136)
    {
      num = 109;
    }
  else if(num > 122)
    {
      num -= 26;
    }
  return num;
}
  
